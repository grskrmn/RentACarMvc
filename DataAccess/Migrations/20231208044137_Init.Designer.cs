// <auto-generated />
using System;
using DataAccess.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    [Migration("20231208044137_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Identities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("brand_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 4, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(5215),
                            Name = "Togg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 12, 5, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(5227),
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 12, 6, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(5229),
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 12, 6, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(5231),
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 12, 6, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(5232),
                            Name = "Fiat"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("color_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("colors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 8, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(8448),
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 12, 6, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(8451),
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 12, 8, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(8453),
                            Name = "Beyaz"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 12, 7, 4, 41, 37, 417, DateTimeKind.Utc).AddTicks(8455),
                            Name = "Siyah"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer")
                        .HasColumnName("color_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_price");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer")
                        .HasColumnName("model_year");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.ToTable("models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Capacity = 4,
                            ColorId = 1,
                            CreatedAt = new DateTime(2023, 12, 6, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3200),
                            DailyPrice = 750m,
                            Description = "Yeni elektirikli togg.",
                            ModelYear = 2023,
                            Name = "X10"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Capacity = 4,
                            ColorId = 3,
                            CreatedAt = new DateTime(2023, 12, 5, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3206),
                            DailyPrice = 750m,
                            Description = "Yeni elektirikli x10 togg.",
                            ModelYear = 2023,
                            Name = "X10"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            Capacity = 4,
                            ColorId = 3,
                            CreatedAt = new DateTime(2023, 11, 18, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3208),
                            DailyPrice = 650m,
                            Description = "Ford fieasta.",
                            ModelYear = 2021,
                            Name = "Fiesta"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Capacity = 4,
                            ColorId = 1,
                            CreatedAt = new DateTime(2023, 8, 30, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3210),
                            DailyPrice = 650m,
                            Description = "Togg x10.",
                            ModelYear = 2022,
                            Name = "X10"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 2,
                            Capacity = 4,
                            ColorId = 3,
                            CreatedAt = new DateTime(2023, 11, 10, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3212),
                            DailyPrice = 870m,
                            Description = "Ford focus.",
                            ModelYear = 2020,
                            Name = "Focus"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            Capacity = 4,
                            ColorId = 1,
                            CreatedAt = new DateTime(2023, 11, 28, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3215),
                            DailyPrice = 340m,
                            Description = "Hyundai i20.",
                            ModelYear = 2019,
                            Name = "I20"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 3,
                            Capacity = 4,
                            ColorId = 2,
                            CreatedAt = new DateTime(2023, 10, 30, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3217),
                            DailyPrice = 768m,
                            Description = "Hyundai accent blue.",
                            ModelYear = 2022,
                            Name = "Accent Blue"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 4,
                            Capacity = 4,
                            ColorId = 2,
                            CreatedAt = new DateTime(2023, 10, 27, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3219),
                            DailyPrice = 900m,
                            Description = "Renault Megane.",
                            ModelYear = 2023,
                            Name = "Megane"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 4,
                            Capacity = 4,
                            ColorId = 3,
                            CreatedAt = new DateTime(2023, 11, 16, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3221),
                            DailyPrice = 570m,
                            Description = "Renault symbol.",
                            ModelYear = 2020,
                            Name = "Symbol"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 2,
                            Capacity = 4,
                            ColorId = 3,
                            CreatedAt = new DateTime(2023, 9, 23, 4, 41, 37, 418, DateTimeKind.Utc).AddTicks(3223),
                            DailyPrice = 754m,
                            Description = "Ford connect.",
                            ModelYear = 2018,
                            Name = "Connect"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer")
                        .HasColumnName("model_id");

                    b.Property<DateTime>("RentedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rented_date");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("renturn_date");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("UserId");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4c41d400-935d-4d1c-9833-bed73c617254",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "13b26b31-6a37-46dc-b8bf-736ce11f0eed",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "7923ea06-9b20-4f10-a094-26d0da6effb7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Model", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Color", "Color")
                        .WithMany("Models")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Entities.Concrete.Rental", b =>
                {
                    b.HasOne("Entities.Concrete.Model", "Model")
                        .WithMany("Rentals")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Identities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Model");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entities.Identities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Entities.Concrete.Color", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Entities.Concrete.Model", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
